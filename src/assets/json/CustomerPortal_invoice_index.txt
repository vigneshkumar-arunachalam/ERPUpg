
<?php 
    $this->partial('layouts/sidebar');
?>
<style>
.center_form_display {
  position: absolute;
  height: 90%;
  width: 40%;
  left: 40%;
  z-index: 1;
  background-color: #fff; /* or any other background color */
  padding: 20px; /* add some padding for better readability */
  border: 1px solid #ddd; /* add a border for better visibility */
  border-radius: 10px; /* add a rounded corner for a nicer look */
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2); /* add a subtle shadow for depth */
}
</style>
<div>
<div class="center_form_display flex justify-center over flex flex-col" style="display:none">
<!-- <iframe src="https://docs.google.com/viewer?url=https://apiringq.ringq.io/invoice/invoice-D-2024-000100.pdf&embedded=true" width="100%" height="700"></iframe> -->
<iframe id="myIframe" src="" width="100%" height="700"></iframe>
<button class="closeform"> close</button></div>
<!-- <span class="textdisplay"></span> -->

<div class="bg-white m-6 border rounded-lg pb-5">
<div class="flex flex-col md:flex-row justify-between p-5 space-y-4 md:space-y-0">
    <h1 class="text-2xl font-bold pl-3">Invoice1</h1>
  
<div class="flex justify-end space-x-4 pr-3 md:pr-3">



    </div>

</div>
    <div class="px-8 relative w-full">
    <div class="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2">
        <!-- Search input and column filter container -->
<div class="flex space-x-2 w-full md:mr-12">
    <div class="relative flex-grow">
        <input type="text" placeholder="Search..." class="border rounded-lg py-3 text-sm w-full bg-gray-100 pl-10"
            id="searchInput">
        <img src="https://apiringq.ringq.io/img/search.png" alt="Search Icon"
            class="absolute inset-y-0 right-0 mt-3 h-6 w-6 search-custom">
    </div>
    
    <div class="relative flex-shrink-0">
        <select id="columnFilter"
            class="appearance-none block w-full bg-white border border-gray-300 rounded-lg py-3 pl-3 pr-8 text-gray-700 leading-tight focus:outline-none focus:border-gray-300 hover:bg-gray-200">
                <option value="all">All</option> <!-- All option added here -->
          <option value="id">ID</option>
         <option value="invoice">Invoice</option>
        <option value="date">Date</option>
        </select>
        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                    d="M19 9l-7 7-7-7"></path>
            </svg>
        </div>
    </div>
</div>


        <!-- Date filter container -->
        <div class="relative w-full md:w-auto">
            <select id="dateFilter"
                class="appearance-none block w-full md:w-auto bg-white border border-gray-300 rounded-lg py-3 pl-3 pr-8 text-gray-700 leading-tight focus:outline-none focus:border-gray-300 hover:bg-gray-200">
                <option value="all">All</option>
                <option value="today">Today</option>
                <option value="yesterday">Yesterday</option>
                <option value="last7days">Last 7 Days</option>
            </select>
            <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M19 9l-7 7-7-7"></path>
                </svg>
            </div>
        </div>
    </div>
</div>





   <!-- Table design -->
    <div class="overflow-x-auto overflow-y-auto m-6 border border-gray-200 rounded-lg" style="height: 600px;" >
        <table id="leadsTable" class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
       <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User ID</th>
    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Invoice Number</th>
    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">View</th>
    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
             <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                 <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
           <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created </th>


 

                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                <!-- Table rows will be populated here dynamically -->
            </tbody>
        </table>
    </div>

    <!-- Pagination design -->
    <div class="flex justify-between ml-8">
        <nav class="flex items-center bg-white rounded-lg pagination-buttons">
            <!-- Pagination buttons will be dynamically generated here -->
        </nav>
        <div class="text-sm text-gray-500 mr-2 md:mr-12">numbers</div>
    </div>
    <iframe id="file-iframe" style="display: none;"></iframe>
    </div>

    </div>
<script>
$(document).ready(function() {
    // Attach keydown event handler to input elements with IDs 'price' and 'price2'
    $('#price, #price2').on('keydown', function(event) {
        // Allow control keys and numbers (0-9), and period for decimals
        if (!event.key.match(/[\d.]/) && ![8, 46, 37, 39, 9, 13].includes(event.keyCode)) {
            event.preventDefault();
        }
    });
});

</script>

<script>
let savedEventId; // Declare a variable to save the eventId
let data = []; // Declare a global variable to store the initial data
let filteredData = []; // Initialize filteredData as an empty array



// Function to handle AJAX response
function handleAjaxResponse(response) {
        totalpagesshown = response.itemsPerPage;
        endIndex = response.totalPages;
        totalEntries = response.count;
        currentPage = response.currentPage;
        data = response.data; // Store the initial data in the data variable
        filteredData = data.slice(); // Copy the initial data to filteredData
        currententity = currentPage * totalpagesshown - totalpagesshown + 1;
endIndex = Math.min(currententity + totalpagesshown - 1, totalEntries);
        // console.log(totalpagesshown);
        // console.log(data);


        displayPage(); // Display the page with the initial data
    }

// Fetch data using AJAX POST request
function fetchData(searchingtext) {
        $.ajax({
        type: 'POST',
        url: '/transaction/list', // Adjust the URL as needed
        data: JSON.stringify({
            "page": currentPage,
            "search": searchingtext
        }),
        contentType: 'application/json',
        dataType: 'json',
        headers: {
            'Authorization': 'almsfvhasfiuyiuasfhjkqwfiuqwfhjkasfiuyaisuyfq'
        },
        success: handleAjaxResponse,
        error: function(xhr, status, error) {
            console.error('AJAX Error:', error);
            Swal.fire({
                icon: "error",
                title: "Oops...",
                text: "An error occurred while fetching data. Please try again later.",
            });
        }
    });
}

const rowsPerPage = 10;
let currentPage = 1;

// Cache DOM elements
const leadsTableBody = $('#leadsTable tbody');
const searchInput = $('#searchInput');
// const columnFilter = $('#columnFilter');
const paginationContainer = $('.pagination-buttons');
const textInfo = $('.text-sm.text-gray-500.mr-2');

// Format Unix timestamp to date string
function formatCreatedDate(unixTimestamp) {
    const date = new Date(unixTimestamp * 1000);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

// Format Unix timestamp or date string to a formatted date string
function formatCreatedDate2(loginTime) {
    if (typeof loginTime === 'number' || /^[0-9]+$/.test(loginTime)) {
        // If input is a number (Unix timestamp) or a string representing a number, convert it to date
        const unixTimestamp = typeof loginTime === 'string' ? parseInt(loginTime, 10) : loginTime;
        const date = new Date(unixTimestamp * 1000);
        const day = date.getDate().toString().padStart(2, '0'); // Add leading zero
        const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
    } else if (typeof loginTime === 'string') {
        // If input is a string (date string), just return it as it is
        return loginTime;
    } else {
        // If input type is neither number nor string, return an empty string or handle it appropriately
        return '';
    }
}


function displayPage() {
    // const startIndex = (currentPage - 1) * rowsPerPage;
    // const endIndex = Math.min(startIndex + rowsPerPage, filteredData.length);
    leadsTableBody.empty();

    // Create a document fragment to improve performance
    const fragment = document.createDocumentFragment();

    // Slice data for the current page
    const pageData = filteredData.slice(0, 10);
    let newUrl = '';
    pageData.forEach(item => {
        const formattedDate = formatCreatedDate(item.Created);
        const row = document.createElement('tr');

        // Assuming filePath and filename variables exist in item
        const filePath = item.invoiceNumber; 
        const downloadUrl = 'https://apiringq.ringq.io/customer/downloadAttachment?filename=' + encodeURIComponent('invoice-' + filePath + '.pdf');

        // Create the row content
        row.innerHTML = `
            <td class="px-6 py-4 break-line max-w-xs">${item.UserID}</td>

            <td> 
                <a href="${downloadUrl}" class="truncate no-underline inline-flex self-center custom-download items-center p-2 text-sm font-medium text-center text-white bg-[#11224d] rounded-lg hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-gray-50">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="h-5 w-5 mr-2">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3 16.5v2.25A2.25 2.25 0 0 0 5.25 21h13.5A2.25 2.25 0 0 0 21 18.75V16.5M16.5 12 12 16.5m0 0L7.5 12m4.5 4.5V3" />
                    </svg>
                    ${item.invoiceNumber}
                </a>
            </td>
            <td>
                <button value="${item.invoiceNumber}" class="triggers custom-style">view</button>
            </td>
          
            <td class="px-6 py-4 break-line max-w-xs">${item.email}</td>
            <td class="px-6 py-4 break-line max-w-xs">$ ${item.price}</td>
            <td class="px-6 py-4 break-line max-w-xs">${item.status}</td>
           <td>
    <a href="https://cap.ringq.com/card/payment?invoice=${item.invoiceNumber}" class="paid custom-style">Paid</a>

            </td>
            <td class="px-6 py-4 break-line max-w-xs">${formattedDate}</td>
        `;

  
        const viewButton = row.querySelector('button.triggers');
          const paidButton = row.querySelector('a.paid');
        const downloadLink = row.querySelector('a.custom-download');

        // Check if status is 'pending'
        if (item.status === 'pending') {
            // Hide the view button and download link if status is pending
             
          if (item.method !== 'Squareup') {

   paidButton.style.display = 'none';


           }


            viewButton.style.display = 'none';
            downloadLink.style.display = 'none';
        } else {
              paidButton.style.display = 'none';
            viewButton.style.display = 'inline-block';
            downloadLink.style.display = 'inline-flex';

         


        }

  
        // Append the row to the document fragment
        fragment.appendChild(row);
    });

    // Append the rows to the table body
    leadsTableBody.append(fragment);

    // Update text info
    // const totalEntries = filteredData.length;
    textInfo.text(`Showing ${currententity} to ${endIndex} of ${totalEntries} entries`);

    // Generate pagination controls
    generatePaginationControls(totalEntries);
}


// function viewFile(downloadUrl) {
// //   // Create a popup window
// //   const popup = window.open('', '_blank', 'width=800,height=600');
// print(downloadUrl)
// //   // Fetch the PDF file
// //   fetch(downloadUrl)
// //     .then(response => response.blob())
// //     .then(pdfBlob => {
// //       // Create a PDF viewer instance
// //       const pdfViewer = new PDFViewer({
// //         container: popup.document.body,
// //         pdf: pdfBlob,
// //       });

// //       // Render the PDF file
// //       pdfViewer.render();
// //     });
// }
$(document).on('click', '.triggers', function() {
    console.log('this is the value',this.value);
    $('.textdisplay').text('https://apiringq.ringq.io/img/RingQ');
    $('.center_form_display').show();
    var newUrlrecall = 'https://docs.google.com/viewer?url=https://apiringq.ringq.io/invoice/invoice-' + this.value + '.pdf&embedded=true';
    $('#myIframe').attr('src', newUrlrecall);

});
$(document).on('click', '.closeform', function() {
    $('.textdisplay').text('https://apiringq.ringq.io/img/RingQ');
    $('.center_form_display').hide();
    $('#myIframe').attr('src', '');
});
$(document).ready(function () {
        const inputField = $('#searchInput, #columnFilter'); // Replace with your input field ID
        const debouncedFunction = debounce(function () {
            currentPage = 1;
            $('#dateFilter').val('all');
            searchText = $('#searchInput').val();
            columnFilter = $('#columnFilter').val();

            fetchData(searchText);
        }, 500); // 2000ms = 2 seconds


        inputField.on('input change', debouncedFunction);
    });








function filterData(query, column) {
    // if (query === '') {
    //     // If the query is empty, reset filteredData to the original data list
    //     filteredData = data.slice();
    // } else {
    //     // Filter data based on query and column
    //     filteredData = data.filter(item => {
    //         let searchText = '';

    //         // Determine which data field to search in based on the selected column
    //         switch (column) {
    //             case 'all':
    //                 // Concatenate all searchable fields for the 'all' filter
    //                 searchText = (item.email + ' ' + item.invoiceNumber + ' ' + item.company + ' ' + item.UserID + ' ' + formatCreatedDate(item.Created)).toLowerCase();
    //                 break;
    //             case 'email':
    //                 searchText = item.email.toLowerCase();
    //                 break;
    //             case 'id':
    //                 searchText = item.UserID.toLowerCase();
    //                 break;
    //             case 'invoice':
    //                 searchText = item.invoiceNumber.toLowerCase();
    //                 break;
    //             case 'date':
    //                 searchText = formatCreatedDate(item.Created).toLowerCase();
    //                 break;
    //             default:
    //                 return false; // Invalid column
    //         }

    //         // Return true if the search text includes the query
    //         return searchText.includes(query.toLowerCase());
    //     });
    // }

    // Reset pagination to the first page
    currentPage = 1;

    // Display the updated page
    displayPage();
}



// Attach event listener to search input
document.getElementById('searchInput').addEventListener('input', function () {
        const query = this.value;
        // const column = document.getElementById('columnFilter').value;
        filterData(query);
    });

    function debounce(func, wait) {
        let timeout;
        return function () {
            const context = this;
            const args = arguments;
            clearTimeout(timeout);
            timeout = setTimeout(() => {
                func.apply(context, args);
            }, wait);
        };
    }
// Filter data based on the date filter
function filterDataByDate(dateFilter) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const yesterday = new Date(today);
    yesterday.setDate(today.getDate() - 1);
    
    const last7Days = new Date(today);
    last7Days.setDate(today.getDate() - 7);
    
    // Filter data based on the selected date range
    filteredData = data.filter(item => {
        const itemDate = new Date(item.timestamp * 1000);
        itemDate.setHours(0, 0, 0, 0);
        
        switch (dateFilter) {
                case 'today':
                    return itemDate.getTime() === today.getTime();
                case 'yesterday':
                    return itemDate.getTime() === yesterday.getTime();
                case 'Last 7 Days':
                    return itemDate >= last7Days && itemDate <= today;
                default:
                    return true;
        }
    });

    // Reset pagination to the first page after filtering
    currentPage = 1;
    displayPage();
}
const debounce1 = function(func, wait) {
    let timeout;
    return function() {
        const context = this;
        const args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            func.apply(context, args);
        }, wait);
    };
};

// Attach event listener to date filter dropdown
document.getElementById('dateFilter').addEventListener('change', debounce1(function(event) {
    searchText1 = $('#dateFilter').val();
    filterDataByDate(event.target.value);
    searchText = $('#searchInput').val();
    searchText =searchText + searchText1;
    console.log(searchText);
    

    fetchData(searchText);
}, 500));

// Generate pagination controls
function generatePaginationControls(totalEntries) {
    const totalPages = Math.ceil(totalEntries / rowsPerPage);
    const maxButtonsToShow = 3;
    const halfButtonsToShow = Math.floor(maxButtonsToShow / 2);
    
    let startPage = Math.max(1, currentPage - halfButtonsToShow);
    let endPage = Math.min(totalPages, currentPage + halfButtonsToShow);
    
    if (endPage - startPage + 1 < maxButtonsToShow) {
        if (startPage === 1) {
            endPage = Math.min(totalPages, startPage + maxButtonsToShow - 1);
        } else {
            startPage = Math.max(1, endPage - maxButtonsToShow + 1);
        }
    }
    
    paginationContainer.empty();
    
    const prevButton = $('<a href="#" class="prev-button py-1 px-4 border border-gray-300 border-r rounded-lg hover:bg-gray-100 hover:shadow-md"></a>')
        .html('<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" /></svg>');
    
    // Add click event for previous button
    prevButton.on('click', function(event) {
        event.preventDefault();
        if (currentPage > 1) {
                currentPage--;
                updateActivePageButton();
                displayPage();
                fetchData();
            }
    });
    paginationContainer.append(prevButton);
    
    if (startPage > 1) {
        paginationContainer.append($('<span class="ellipsis ml-2">...</span>'));
    }
    
    // Generate page buttons
    for (let i = startPage; i <= endPage; i++) {
        const pageButton = $('<a href="#" class="py-1 px-4 hover:bg-gray-100 hover:shadow-md"></a>').text(i);
        if (i === currentPage) {
            pageButton.addClass('bg-gray-100');
        }
        
        pageButton.on('click', function (event) {
                event.preventDefault();
                currentPage = parseInt($(this).text());
                updateActivePageButton();
                displayPage();
                fetchData();
            });
        paginationContainer.append(pageButton);
    }
    
    if (endPage < totalPages) {
        paginationContainer.append($('<span class="ellipsis mr-2">...</span>'));
    }
    
    // Next button
    const nextButton = $('<a href="#" class="next-button py-1 px-4 border border-gray-300 border-l rounded-lg hover:bg-gray-100 hover:shadow-md"></a>')
        .html('<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" /></svg>');
    
    // Add click event for next button
    nextButton.on('click', function(event) {
        event.preventDefault();
        if (currentPage < totalPages) {
                currentPage++;
                updateActivePageButton();
                displayPage();
                fetchData();
            }
    });
    paginationContainer.append(nextButton);
}

// Update the active page button
function updateActivePageButton() {
    const pageButtons = paginationContainer.find('a');
    
    pageButtons.each(function() {
        const pageButton = $(this);
        const pageNum = parseInt(pageButton.text());
        
        if (pageNum === currentPage) {
            pageButton.addClass('bg-gray-100');
        } else {
            pageButton.removeClass('bg-gray-100');
        }
    });
}






// Initialize the page when the document is ready
$(document).ready(function() {
    fetchData();
});
</script>


